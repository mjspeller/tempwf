name: delphix-masking

on:
  workflow_dispatch:
  push:
    branches: ['chore/*']
    paths:
      - .github/workflows/masking.yaml
env:
  MASKING_REPO: fedex/eai-3535610-delphix-continuous-compliance-automation

jobs:
  get-databases:
    permissions:
      contents: read
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.get-databases.outputs.matrix }}
    steps:
      - name: Generate Matrix
        id: get-databases
        uses: actions/github-script@v7
        with:
          script: |
            const decoded_json = await JSON.parse(Buffer.from(process.env.CONFIGJSON, 'base64').toString('utf-8'))
            core.setOutput('matrix', Object.values(decoded_json))
        env:
          CONFIGJSON: ${{ secrets.FXE_PROD_GITHUB_DELPHIX_DATA }}
  get-schemas:
    name: ${{ matrix.config.DB_NAME }}
    runs-on: self-hosted
    needs: [get-databases]
    strategy:
      matrix:
        config: ${{ fromJSON(needs.get-databases.outputs.matrix) }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GLOBAL_PROD_GIT_CLONE_ID }}
          private_key: ${{ secrets.GLOBAL_PROD_GIT_CLONE_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MASKING_REPO }}
          ref: main
          token: ${{ steps.generate_token.outputs.token }}
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip
      - name: Install Pip and Python packages
        run: |
          pip install -r requirements.txt
      - name: Generate Schema Matrix
        id: set-matrix
        env:
          DB_HOST: ${{ matrix.config.DB_HOST }}
          DB_PORT: ${{ matrix.config.DB_PORT }}
          DB_NAME: ${{ matrix.config.DB_NAME }}
          DB_LOGIN_ID: ${{ matrix.config.DB_LOGIN_ID }}
        run: |
          encoded_json=${{ secrets.FXE_PROD_GITHUB_DELPHIX_SECRET }}
          db_password=$(echo $encoded_json | base64 --decode | jq -r '."${{ matrix.config.KEY_NAME }}".DB_PASSWORD')
          echo "::add-mask::$db_password"
          export DB_PASSWORD=$db_password
          schemas=$(python app/schemas_json.py)
          echo $schemas
          echo "::set-output name=matrix::$schemas"

  masking:
    name: ${{ matrix.config.DB_NAME }}-${{ matrix.schema }}
    needs: [get-databases, get-schemas]
    permissions: {}
    runs-on: self-hosted
    env:
      python_path: python
      app_path: app
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJSON(needs.get-databases.outputs.matrix) }}
        schema: ${{ fromJSON(needs.get-schemas.outputs.matrix) }}
    steps:
      # Generate an access token from the Clone GitHub app.
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GLOBAL_PROD_GIT_CLONE_ID }}
          private_key: ${{ secrets.GLOBAL_PROD_GIT_CLONE_PRIVATE_KEY }}
      - name: Get root dir
        id: pwd
        run: |
          echo PWD=$PWD >> $GITHUB_OUTPUT
      - name: Checkout Python
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MASKING_REPO }}
          ref: main
          token: ${{ steps.generate_token.outputs.token }}
          path: ${{env.python_path}}
      - name: Checkout App Repo
        uses: actions/checkout@v4
        with:
          path: ${{env.app_path}}
          token: ${{ steps.generate_token.outputs.token }}
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # install the python version needed
          cache: pip
      - name: Install Pip and Python packages
        run: |
          pip install -r ./${{env.python_path}}/requirements.txt

      - name: Run Masking Job
        env:
          EAI: ${{ matrix.config.EAI }}
          APPLICATION_NAME: ${{ matrix.config.APPLICATION_NAME }}
          DB_HOST: ${{ matrix.config.DB_HOST }}
          DB_PORT: ${{ matrix.config.DB_PORT }}
          DB_NAME: ${{ matrix.config.DB_NAME }}
          CONNECTOR_TYPE: ${{ matrix.config.CONNECTOR_TYPE }}
          DB_LOGIN_ID: ${{ matrix.config.DB_LOGIN_ID }}
          POSTGRES_DB: ${{ matrix.config.POSTGRES_DB }}
          POSTGRES_PORT: ${{ matrix.config.POSTGRES_PORT }}
          MASKING_ENGINE_URL: ${{ matrix.config.MASKING_ENGINE_URL }}
          MASKING_ENGINE_USER: ${{ matrix.config.MASKING_ENGINE_USER }}
          INVENTORY_DB_NAME: ${{ matrix.config.INVENTORY_DB_NAME }}
          INVENTORY_DB_USER: ${{ matrix.config.INVENTORY_DB_USER }}
          INVENTORY_DB_HOST: ${{ matrix.config.INVENTORY_DB_HOST }}
          SCHEMA_NAME: ${{ matrix.schema }}
          MASKING_INVENTORY_FILE: ./${{env.app_path}}/.delphix/${{ matrix.config.DB_NAME }}_${{ matrix.schema }}.csv
        run: |
          encoded_json=${{ secrets.FXE_PROD_GITHUB_DELPHIX_SECRET }}
          db_password=$(echo $encoded_json | base64 --decode | jq -r '."${{ matrix.config.KEY_NAME }}".DB_PASSWORD')
          echo "::add-mask::$db_password"
          export DB_PASSWORD=$db_password

          inventory_db_password=$(echo $encoded_json | base64 --decode | jq -r '."${{ matrix.config.KEY_NAME }}".INVENTORY_DB_PASSWORD')
          echo "::add-mask::$inventory_db_password"
          export INVENTORY_DB_PASSWORD=$inventory_db_password

          masking_engine_password=$(echo $encoded_json | base64 --decode | jq -r '."${{ matrix.config.KEY_NAME }}".MASKING_ENGINE_PASSWORD')
          echo "::add-mask::$masking_engine_password"
          export MASKING_ENGINE_PASSWORD=$masking_engine_password

          export REPORT_DIRECTORY=./reports
          export PROFILE_SET=./asdd
          mkdir -p $REPORT_DIRECTORY
          mkdir -p $PROFILE_SET

          python ./${{env.python_path}}/app/orchestrator.py mask
